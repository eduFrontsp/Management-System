pipeline {
    agent any

    environment {
        // Defina variáveis de ambiente se necessário
        DOCKER_IMAGE = 'order-management-app'
        SONARQUBE = 'SonarQube'
    }

    stages {
        stage('Checkout') {
            steps {
                // Clona o repositório do Git
                git 'https://github.com/your-repo/order-management.git'
            }
        }

        stage('Build') {
            steps {
                // Executa o Maven para compilar o projeto
                sh './mvnw clean package'
            }
        }

        stage('Test') {
            steps {
                // Executa os testes unitários com Maven
                sh './mvnw test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Executa análise de qualidade de código com SonarQube
                    withSonarQubeEnv(SONARQUBE) {
                        sh './mvnw sonar:sonar'
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                // Cria a imagem Docker
                script {
                    docker.build(DOCKER_IMAGE)
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Adicione comandos para deploy na AWS ou outro ambiente
                    // Exemplo para empurrar a imagem Docker para um registro
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-credentials-id') {
                        docker.image(DOCKER_IMAGE).push('latest')
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                // Limpeza dos arquivos temporários
                sh 'docker system prune -f'
            }
        }
    }

    post {
        always {
            // Etapas que devem ser executadas após o pipeline, independentemente do resultado
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
            junit '**/target/test-classes/*.xml'
        }

        success {
            echo 'Build and tests succeeded!'
        }

        failure {
            echo 'Build or tests failed!'
        }
    }
}
